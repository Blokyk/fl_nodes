{
  "sksl": {
    "entrypoint": "grid_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float uGridSpacingX;\nuniform float uGridSpacingY;\nuniform float uStartX;\nuniform float uStartY;\nuniform float uLineWidth;\nuniform vec4 uLineColor;\nuniform float uIntersectionRadius;\nuniform vec4 uIntersectionColor;\nuniform vec4 uViewport;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_smoothStep(float edge0, float edge1, float x)\n{\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return (t * t) * (3.0 - (2.0 * t));\n}\n\nfloat FLT_flutter_local_getLineAlpha(float dist, float lineWidth)\n{\n    float halfWidth = lineWidth * 0.5;\n    float pixelRange = 1.0;\n    float param = halfWidth - pixelRange;\n    float param_1 = halfWidth + pixelRange;\n    float param_2 = dist;\n    return 1.0 - FLT_flutter_local_smoothStep(param, param_1, param_2);\n}\n\nfloat FLT_flutter_local_getCircleAlpha(float dist, float radius)\n{\n    float pixelRange = 1.0;\n    float param = radius - pixelRange;\n    float param_1 = radius + pixelRange;\n    float param_2 = dist;\n    return 1.0 - FLT_flutter_local_smoothStep(param, param_1, param_2);\n}\n\nvoid FLT_main()\n{\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    float x = fragCoord.x;\n    float y = fragCoord.y;\n    float viewportLeft = uViewport.x;\n    float viewportTop = uViewport.y;\n    float viewportRight = uViewport.z;\n    float viewportBottom = uViewport.w;\n    if ((((x < viewportLeft) || (x > viewportRight)) || (y < viewportTop)) || (y > viewportBottom))\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    float verticalAlpha = 0.0;\n    float horizontalAlpha = 0.0;\n    float intersectionAlpha = 0.0;\n    if (uGridSpacingX > 0.0)\n    {\n        float xSteps = floor(((x - uStartX) / uGridSpacingX) + float(0.5));\n        float lineX = uStartX + (xSteps * uGridSpacingX);\n        if ((lineX >= viewportLeft) && (lineX <= viewportRight))\n        {\n            float dx = abs(x - lineX);\n            float param_3 = dx;\n            float param_4 = uLineWidth;\n            verticalAlpha = FLT_flutter_local_getLineAlpha(param_3, param_4);\n        }\n    }\n    if (uGridSpacingY > 0.0)\n    {\n        float ySteps = floor(((y - uStartY) / uGridSpacingY) + float(0.5));\n        float lineY = uStartY + (ySteps * uGridSpacingY);\n        if ((lineY >= viewportTop) && (lineY <= viewportBottom))\n        {\n            float dy = abs(y - lineY);\n            float param_5 = dy;\n            float param_6 = uLineWidth;\n            horizontalAlpha = FLT_flutter_local_getLineAlpha(param_5, param_6);\n        }\n    }\n    if (((uIntersectionRadius > 0.0) && (uGridSpacingX > 0.0)) && (uGridSpacingY > 0.0))\n    {\n        float xSteps_1 = floor(((x - uStartX) / uGridSpacingX) + float(0.5));\n        float ySteps_1 = floor(((y - uStartY) / uGridSpacingY) + float(0.5));\n        vec2 intersection = vec2(uStartX + (xSteps_1 * uGridSpacingX), uStartY + (ySteps_1 * uGridSpacingY));\n        bool _263 = intersection.x >= viewportLeft;\n        bool _270;\n        if (_263)\n        {\n            _270 = intersection.x <= viewportRight;\n        }\n        else\n        {\n            _270 = _263;\n        }\n        bool _277;\n        if (_270)\n        {\n            _277 = intersection.y >= viewportTop;\n        }\n        else\n        {\n            _277 = _270;\n        }\n        bool _284;\n        if (_277)\n        {\n            _284 = intersection.y <= viewportBottom;\n        }\n        else\n        {\n            _284 = _277;\n        }\n        if (_284)\n        {\n            float dist_1 = distance(fragCoord, intersection);\n            float param_7 = dist_1;\n            float param_8 = uIntersectionRadius;\n            intersectionAlpha = FLT_flutter_local_getCircleAlpha(param_7, param_8);\n        }\n    }\n    vec4 lineColorWithAlpha = uLineColor * max(verticalAlpha, horizontalAlpha);\n    vec4 intersectionColorWithAlpha = uIntersectionColor * intersectionAlpha;\n    fragColor = mix(lineColorWithAlpha, intersectionColorWithAlpha, vec4(intersectionAlpha));\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uGridSpacingX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uGridSpacingY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uStartX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uStartY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uLineWidth",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uLineColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uIntersectionRadius",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uIntersectionColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "uViewport",
        "rows": 4,
        "type": 10
      }
    ]
  }
}